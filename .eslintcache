[{"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/reportWebVitals.js":"1","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/App.js":"2","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/constants/actions.js":"3","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/index.js":"4","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/constants/phase1.js":"5","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/components/game/Scene.js":"6","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/home/Home.js":"7","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/worlds/Worlds.js":"8","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/game/Game.js":"9","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/components/Toolbar/Toolbar.js":"10"},{"size":362,"mtime":1606437728450,"results":"11","hashOfConfig":"12"},{"size":858,"mtime":1606713397389,"results":"13","hashOfConfig":"12"},{"size":464,"mtime":1606445048880,"results":"14","hashOfConfig":"12"},{"size":457,"mtime":1606714162414,"results":"15","hashOfConfig":"12"},{"size":282,"mtime":1606719400109,"results":"16","hashOfConfig":"12"},{"size":5929,"mtime":1606720067209,"results":"17","hashOfConfig":"12"},{"size":818,"mtime":1606718319505,"results":"18","hashOfConfig":"12"},{"size":2071,"mtime":1606719190922,"results":"19","hashOfConfig":"12"},{"size":3518,"mtime":1606717102917,"results":"20","hashOfConfig":"12"},{"size":365,"mtime":1606717449479,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bcjii5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/reportWebVitals.js",[],["49","50"],"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/App.js",[],"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/constants/actions.js",[],["51","52"],"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/index.js",[],"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/constants/phase1.js",[],"/home/jvpass/Projects/CesarSchool/5/CodeKids/src/components/game/Scene.js",["53","54","55","56"],"import React from \"react\";\n\nimport Phaser from \"phaser\"\n\nimport Ground from \"../../assets/ground.png\"\nimport Flag from \"../../assets/flag.png\"\nimport Background from \"../../assets/background.png\"\nimport Ring from \"../../assets/ring.png\"\n\nimport Phase1 from \"../../constants/phase1\";\n\nclass Scene extends Phaser.Scene {\n\n    constructor(props) {\n        super(props);\n\n        this.lastMeasure = 0\n    }\n\n    submitQueue(queue) {\n        console.log(queue)\n        this.queue = queue\n    }\n\n    preload() {\n        this.load.spritesheet(\n            \"character\",\n            \"https://phaser.io/content/tutorials/making-your-first-phaser-3-game/dude.png\",\n            {frameWidth: 32, frameHeight: 48})\n\n        this.textures.addBase64(\"ground\", Ground)\n        this.textures.addBase64(\"background\", Background)\n        this.textures.addBase64(\"flag\", Flag)\n        this.textures.addBase64(\"ring\", Ring)\n    }\n\n    create() {\n        const width = this.game.config.width\n\n        this.add.image(0, 0, \"background\")\n            .setOrigin(0, 0)\n            .setDisplaySize(width, this.game.config.height)\n\n        const blockSize = width / Phase1.length\n        this.distance = blockSize\n        this.actionOffset = 40\n        this.platforms = this.physics.add.staticGroup();\n\n        for (let line = 0; line < Phase1.length; line++) {\n            for (let column = 0; column < Phase1[line].length; column++) {\n                if (Phase1[line][column] === 1) {\n                    this.platforms\n                        .create( blockSize * column, blockSize*line, \"ground\")\n                        .setOrigin(0,0)\n                        .setDisplaySize(blockSize, blockSize)\n                        .refreshBody()\n                } else if (Phase1[line][column] === 2) {\n                    this.platforms\n                        .create( blockSize * column, blockSize*line, \"ground\")\n                        .setOrigin(0,0)\n                        .setDisplaySize(blockSize, blockSize)\n                        .refreshBody()\n\n                    this.flag = this.\n                    platforms.create(blockSize * column + (blockSize/2), blockSize * line - 75, \"flag\")\n                        .setOrigin(0,0).refreshBody()\n                } else if (Phase1[line][column] === 3) {\n                    this.platforms\n                        .create( blockSize * column, blockSize*line, \"ground\")\n                        .setOrigin(0,0)\n                        .setDisplaySize(blockSize, blockSize)\n                        .refreshBody()\n\n                    this.player = this.physics.add.sprite((blockSize * column) + (blockSize/2), blockSize*line - 200, \"character\")\n                        .setScale(2)\n                        .setBounce(0.2)\n                        .setCollideWorldBounds(true)\n                        .setGravityY(2000)\n\n                } else if (Phase1[line][column] === 4) {\n                    this.platforms\n                      .create( blockSize * column, blockSize*line, \"ground\")\n                      .setOrigin(0,0)\n                      .setDisplaySize(blockSize, blockSize)\n                      .refreshBody()\n\n                    this.ring = this.\n                    add.image(blockSize * column + (blockSize/2), blockSize * line - 40, \"ring\")\n                }\n            }\n        }\n\n        this.physics.add.collider(this.player, this.platforms);\n\n        this.physics.add.collider(this.player, this.flag, function() {console.log(\"a\")}, function() {console.log(\"a\")}, this)\n\n        this.anims.create({\n            key: 'left',\n            frames: this.anims.generateFrameNumbers(\"character\", { start: 0, end: 3 }),\n            frameRate: 10,\n            repeat: -1\n        });\n\n        this.anims.create({\n            key: 'turn',\n            frames: [ { key: \"character\", frame: 4 } ],\n            frameRate: 20\n        });\n\n        this.anims.create({\n            key: 'right',\n            frames: this.anims.generateFrameNumbers(\"character\", { start: 5, end: 8 }),\n            frameRate: 10,\n            repeat: -1\n        });\n    }\n\n    update(time, delta) {\n        super.update(time, delta);\n\n        if (this.queue != null && this.queue.length > 0) {\n            if (this.lastMeasure === 0) {\n                this.currentActionName = this.queue[0].name\n                this.lastMeasure = time\n            }\n\n            if (time - this.lastMeasure <= 1000) {\n\n                switch (this.currentActionName) {\n                    case \"WALK\":\n                        this.walk(this.distance)\n                        break;\n                    case \"JUMP\":\n                        this.jump()\n                        break;\n                }\n            } else {\n                this.currentActionName = null\n                this.lastMeasure = 0\n                this.queue.shift()\n            }\n        } else {\n            this.stop()\n       }\n        // const cursors = this.input.keyboard.createCursorKeys();\n        // if (cursors.left.isDown)\n        // {\n        //     this.player.setVelocityX(-160);\n        //\n        //     this.player.anims.play('left', true);\n        // }\n        // else if (cursors.right.isDown)\n        // {\n        //     this.player.setVelocityX(160);\n        //\n        //     this.player.anims.play('right', true);\n        // }\n        // else\n        // {\n        //     this.player.setVelocityX(0);\n        //\n        //     this.player.anims.play('turn');\n        // }\n        //\n        // if (cursors.up.isDown)\n        // {\n        //     this.player.setVelocityY(-300);\n        // }\n    }\n\n    walk(velocity = 160) {\n        this.player.setVelocityX(velocity);\n        this.player.anims.play('right', true);\n    }\n\n    jump() {\n        this.walk(this.distance * 2)\n        this.player.setVelocityY(-100);\n    }\n\n    //\n    stop() {\n        this.player.setVelocityX(0);\n        this.player.anims.play('turn');\n    }\n}\n\nexport default Scene\n","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/home/Home.js",["57","58","59","60"],"import React from \"react\";\n\nimport \"./Home.css\"\n\nimport Container from \"@material-ui/core/Container\";\n\nimport Logo from \"../../assets/logo.svg\"\nimport {Button, Grid} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport PlayBtn from \"../../assets/play_btn.svg\"\n\nclass Home extends React.Component {\n\n    render() {\n        return (\n            <Grid\n                container\n                alignItems=\"center\"\n                direction=\"column\">\n                <Grid item xs={12}>\n                    <img src={Logo} className=\"logo\"/>\n                </Grid>\n                <Grid item xs={12}>\n                    <Link to=\"/worlds\">\n                        <img src={PlayBtn}></img>\n                    </Link>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default Home\n","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/worlds/Worlds.js",["61","62","63"],"import React from \"react\";\n\nimport \"./Worlds.css\"\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Arrow from \"../../assets/arrow.png\"\nimport Maze1 from '../../assets/maze1.svg'\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport Toolbar from \"../../components/Toolbar/Toolbar\";\n\nclass Worlds extends React.Component {\n\n  render() {\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        spacing={0}\n        justify=\"center\"\n        alignItems=\"center\">\n        <Toolbar/>\n\n        <Grid item xs={12}>\n          <p className=\"title\">1. Primeira Aventura</p>\n        </Grid>\n        <Switch>\n          <Route path=\"/worlds/:worldId\">\n            <LevelList/>\n          </Route>\n          <Route path=\"/worlds\">\n            <WorldSelector/>\n          </Route>\n        </Switch>\n      </Grid>\n\n    )\n  }\n}\n\n\nconst WorldSelector = (props) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      spacing={0}\n      justify=\"center\"\n      alignItems=\"center\">\n      <Grid item xs className=\"text-align-center\">\n        <img src={Arrow}/>\n      </Grid>\n      <Grid item xs className=\"text-align-center\">\n        <Link to=\"/worlds/01\">\n          <img src={Maze1}/>\n        </Link>\n      </Grid>\n      <Grid item xs className=\"text-align-center\">\n        <img src={Arrow} className=\"rotated\"/>\n      </Grid>\n    </Grid>\n  )\n}\n\nconst LevelList = (props) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      spacing={3}\n      justify=\"center\"\n      alignItems=\"center\">\n      {\n        [...Array(16).keys()].map(level => (\n            <Grid\n              item\n              xs={3}\n              className=\"text-align-center\">\n             <Link to=\"/worlds/01/game\" style={(level !== 0)?{pointerEvents: \"none\"}: {}}>\n               <div\n                 className=\"levelCard\"\n                 style={(level !== 0)? {backgroundColor: \"#197248\"} : {}}>\n                 <p>{level + 1}</p>\n               </div>\n             </Link>\n            </Grid>\n          )\n        )\n      }\n    </Grid>\n  )\n}\n\nexport default Worlds\n","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/pages/game/Game.js",["64","65","66","67"],"import React from \"react\";\n\nimport './Game.css';\n\nimport Grid from \"@material-ui/core/Grid\";\nimport {Container} from \"@material-ui/core\";\n\nimport playIcon from \"../../assets/play_icon.svg\"\nimport ACTIONS from '../../constants/actions'\n\nimport Phaser from \"phaser\";\nimport Scene from \"../../components/game/Scene\"\nimport Toolbar from \"../../components/Toolbar/Toolbar\";\n\n\nclass Game extends React.Component{\n    constructor(props) {\n        super(props);\n        this.props = props\n\n        this.scene = new Scene()\n\n        this.config = {\n            type: Phaser.AUTO,\n            scale: {\n                mode: Phaser.Scale.FIT,\n                parent: \"game\",\n                autoCenter: Phaser.Scale.CENTER_HORIZONTALLY,\n                width: 800,\n                height: 800\n            },\n            physics: {\n                default: 'arcade',\n                arcade: {\n                    gravity: { y: 300 },\n                    debug: false\n                }\n            },\n            scene: this.scene\n        };\n\n        this.state = {\n            queue: []\n        }\n\n\n        this.addAction = this.addAction.bind(this)\n        this.submitQueue = this.submitQueue.bind(this)\n    }\n\n    addAction(action) {\n        this.setState({queue: [...this.state.queue, action]})\n    }\n\n    submitQueue() {\n        this.scene.submitQueue(this.state.queue)\n    }\n\n    componentDidMount() {\n        const game = new Phaser.Game(this.config)\n    }\n\n    render() {\n        const {queue} = this.state\n        return (\n            <div className=\"App background\">\n                <Toolbar/>\n                <div id=\"game\"/>\n                <Grid container spacing={0}>\n                    <Grid item xs={10}>\n                        <Card>\n                            <div style={{overflow: \"scroll\"}} className=\"menu justify-left\">\n                                {\n                                    queue.map(step => (\n                                        <img\n                                            className=\"action-card menu\"\n                                            src={step.icon} />\n                                    ))\n                                }\n                            </div>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Card>\n                            <div className=\"menu justify-center\">\n                                <img src={playIcon} onClick={()=>this.submitQueue()}/>\n                            </div>\n                        </Card>\n                    </Grid>\n                    <Container>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            {\n                                ACTIONS.map(action => (\n                                    <Grid item xs={3} >\n                                        <img\n                                            onClick={() => this.addAction(action)}\n                                            className=\"action-card selector\"\n                                            src={action.icon} />\n                                    </Grid>\n                                ))\n                            }\n                        </Grid>\n                    </Container>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst Card = (props) => {\n    return (\n        <div className=\"card\">\n            {\n                props.children\n            }\n        </div>\n    )\n}\n\nexport default Game;\n","/home/jvpass/Projects/CesarSchool/5/CodeKids/src/components/Toolbar/Toolbar.js",["68"],"import Arrow from \"../../assets/arrow_solid.svg\"\nconst Toolbar = (props) => {\n  return (\n    <div style={{width: \"100%\", height: \"45px\", position: \"relative\"}}>\n      <img\n        onClick={() => window.history.back()}\n        src={Arrow}\n        style={{position: \"absolute\", left:0, top:0, bottom:0, margin:\"auto 10px\"}}/>\n    </div>\n  )\n}\n\nexport default Toolbar\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"69","replacedBy":"73"},{"ruleId":"71","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":8,"nodeType":"77","messageId":"78","endLine":1,"endColumn":13},{"ruleId":"79","severity":1,"message":"80","line":64,"column":37,"nodeType":"81","messageId":"82","endLine":64,"endColumn":38,"fix":"83"},{"ruleId":"79","severity":1,"message":"80","line":87,"column":37,"nodeType":"81","messageId":"82","endLine":87,"endColumn":38,"fix":"84"},{"ruleId":"85","severity":1,"message":"86","line":129,"column":17,"nodeType":"87","messageId":"88","endLine":136,"endColumn":18},{"ruleId":"75","severity":1,"message":"89","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":17},{"ruleId":"75","severity":1,"message":"90","line":8,"column":9,"nodeType":"77","messageId":"78","endLine":8,"endColumn":15},{"ruleId":"91","severity":1,"message":"92","line":21,"column":21,"nodeType":"93","endLine":21,"endColumn":55},{"ruleId":"91","severity":1,"message":"92","line":25,"column":25,"nodeType":"93","endLine":25,"endColumn":44},{"ruleId":"91","severity":1,"message":"92","line":50,"column":9,"nodeType":"93","endLine":50,"endColumn":27},{"ruleId":"91","severity":1,"message":"92","line":54,"column":11,"nodeType":"93","endLine":54,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":58,"column":9,"nodeType":"93","endLine":58,"endColumn":47},{"ruleId":"75","severity":1,"message":"94","line":60,"column":15,"nodeType":"77","messageId":"78","endLine":60,"endColumn":19},{"ruleId":"91","severity":1,"message":"92","line":75,"column":41,"nodeType":"93","endLine":77,"endColumn":63},{"ruleId":"91","severity":1,"message":"92","line":86,"column":33,"nodeType":"93","endLine":86,"endColumn":87},{"ruleId":"91","severity":1,"message":"92","line":95,"column":41,"nodeType":"93","endLine":98,"endColumn":65},{"ruleId":"91","severity":1,"message":"92","line":5,"column":7,"nodeType":"93","endLine":8,"endColumn":86},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"97","text":"98"},{"range":"99","text":"98"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Container' is defined but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'game' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[2062,2084],"\n                    .",[3181,3203]]